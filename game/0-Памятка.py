# Скрипт находится в файле script.rpy
# Программа начинается с метки "start"
# Нельзя использовать табуляцию - нужно использовать только пробелы

# shift+O для вызова игровой консоли. shift+R для перезагрузки кода игры, shift+D - меню разработчика

# По-умолчанию скрипт выглядит примерно так:

# Определение персонажей игры.
define e = Character('Эйлин', color="#c8ffc8")

# Вместо использования оператора image можете просто
# складывать все ваши файлы изображений в папку images.
# Например, сцену bg room можно вызвать файлом "bg room.png",
# а eileen happy — "eileen happy.webp", и тогда они появятся в игре.

# Игра начинается здесь:
label start:

    scene bg room

    show eileen happy

    e "Вы создали новую игру Ren'Py."

    e "Добавьте сюжет, изображения и музыку и отправьте её в мир!"
    
    # Кавычки экранируются как обычно
    # Первая строка - имя говорящего персонажа, вторая - текст
    "Незнакомец" "\"AAA\""

    return

# Оператор return уводит игру из этого скрипта в главное меню


# В файле
# options.rpy
# можно настроить имя игры (видимое и ASCII), версию, наличие в игре регуляторов музыки и т.п.


# Локализация
define e = Character(_('Эйлин'), color="#c8ffc8")

# Оператор _("") используется для того, чтобы локализовать строки


# Изображения
"""
Чтобы добавить изображения нужно поместить их в директорию images
Можно поименовать изображения так, чтобы они сами подхватывались из изображений
Для этого изображение начинается с тега, например, "bg room.jpg"
bg - это тег, который используется для фоновых изображений
В качестве тега может быть использовано имя героя
Изображения могу иметь расширения jpg, png, webp (возможно, и какие-то другие)
"""

"""
Оператор scene очищает экран, начиная новую сцену
scene bg room - выведет bg room в качестве фона

Оператор show добавит новое изображение поверх тех, что уже есть на экране
show hero main
Изображение на экране с тем же тегом заменит другое того же тега
show hero next (то есть "hero main" будет сокрыт, а вместо него будет "hero next")

show hero main at right
Можно указать, где именно будет выведено изображение (right, left, center)
show hero main at right behind hero2
behind - означает, что изображение будет под изображением hero2

hide hero
Скрывает изображение с указанным тегом

Это задаёт позицию изображения (см. ещё ниже)
show eileen happy:
    xalign 0.75
    yalign 1.0

    xalign 0.0 - левая сторона экрана (левый край изображения прижат к левому краю экрана)
    1.0 - правая сторона (правый край изображения прижат к правому краю экрана)


Определение трансформации по имени
transform slightleft:
    xalign 0.25
    yalign 1.0

Использование этой трансформации:
 show eileen vhappy at slightleft
 
Изображение без новой трансформации будет на том же месте, что и более ранне изображение с тем же тегом

"""


"""
Переходы между изображениями
with - указывает, что именно будет применено в качестве эффекта перехода

scene bg whitehouse
with Dissolve(.5)

pause .5

scene bg washington
show eileen happy
with Dissolve(.5)


Аналогично, можно определить переход по имени
define slowdissolve = Dissolve(1.0)

scene bg whitehouse
with slowdissolve

dissolve - растворение
fade - затухание
move - передвижение 
"""


"""
Меню

    menu:

        # Этот диалог будет выведен вместе с меню
        hero "Диалог героя"

        "Да.":
            jump choice1_yes

        "Нет.":
            jump choice1_no

    label choice1_yes:

        # $ - со знака доллара начинается код на pyhton
        $ menu_flag = True

        e "Хотя создание разветвлённого сюжета требует большой логической работы, он позволяет создать для игрока уникальный игровой опыт."

        jump choice1_done

    label choice1_no:

        $ menu_flag = False

        e "Игры без возможности выбора называются кинетическими новеллами и их тоже очень много."

        jump choice1_done

    label choice1_done:

        # ... the game continues here.
 
"""


"""
Ввод текста
    python:
        name = renpy.input("Как вас зовут?")

        # strip убирает пробелы в начале и в конце строки
        name = name.strip() or "Товарищ"
 
     e "Чтобы вставить (интерполировать) переменную, напишите её в квадратных скобках. Не так ли, [name]?"
     Вставка переменной происходит в квадратных скобках
 
    Это работает и в меню

    Теги для текстов
    e "Например, мы хотим сделать его {b}жирным{/b}, {i}курсивным{/i}, {s}зачёркнутым{/s}, {u}подчёркнутым{/u}…"
    e "Тег a может {a=https://www.renpy.org}делать ссылку на сайт{/a} или {a=jump:a_label}прыгать на метки{/a}."
    e "Тег альфа делает текст {alpha=.5}полупрозрачным{/alpha}."
    e "Тег цвета изменяет {color=#0080c0}цвет{/color} текста."
    
    Интерполяция работает и для цветов и прочих параметров тегов
   
    Экранирование тега:
    e "Иногда лучше использовать жирный шрифт, чем тег {{b}."

    e "Тег cps {cps=25}заставляет текст печататься в определённом темпе{/cps}, даже если текст у нас появляется моментально."
    e "Тег cps также может относительно изменять скорость текста, {cps=*2}удваивая{/cps} и {cps=*0.5}уполовинивая{/cps} его."

    e "Тег font изменяет шрифт, например на {font=DejaVuSans-Bold.ttf}DejaVuSans-Bold.ttf{/font}." 
    e "Тег k меняет кернинг текста. Он может {k=-.5}приблизить{/k} или {k=.5}отдалить{/k} символы друг от друга."
    e "Тег size изменяет размер текста. Например, делая его {size=+10}больше{/size} или {size=-10}меньше{/size}, или устанавливая ему {size=30}определённый размер{/size}."
 
    e "Тег space {space=30} добавляет горизонтальный пропуск в тексте.{vspace=30}Тег vspace уже в вертикали, между строками."

    Для диалогов
    e "Тег p переносит строку,{p}и ожидает клика игрока."
    e "Если его аргументом задаётся число,{p=1.5}он ждёт ровно такое число секунд."

    e "Тег w тоже ждёт клика,{w} впрочем, строку он не переносит,{w=.5} в отличие от p."

    eslow "Тег nw заставляет медленный текст{nw}"
    with flashbulb
    extend " немедленно перейти к следующей строке кода."
 
    e "Чтобы перенести строку без пауз,\n вы можете написать \\n. \\' и \\\" позволяют писать кавычки в тексте."
 
    e "Когда переменная дополняется суффиксом !q, специальные символы не исключаются. Это позволяет показать чистое [variable!q] вместе с курсивными тегами."

    e "Когда переменная дополняется !t, она переводится в [translatable!t], то есть становится доступна для перевода через Ren'Py. Для других языков эта фраза может выглядеть иначе."
 
    e "И наконец, некоторые символы — специальные. [[, {{, и \\ должны дублироваться в коде. Символ %% — не исключение, но только если он используется в диалоге."

"""


"""
nvl-персонаж покрывает диалогом весь экран с затемнением, а не пишет что-то снизу

define nvle = Character("Эйлин", color="#c8ffc8", kind=nvl)

nvle "Затем просто используйте таких персонажей в операторе речи."

nvl clear

nvle "При необходимости, вы можете использовать 'nvl clear' для очистки экрана."

nvl hide dissolve
nvl show dissolve

nvle "Операции 'nvl show' и 'nvl hide' используют переходы для показа и скрытия окна NVL."

Меню, в данном случае, может быть показано только последним на экране

    nvle "Затем просто используйте таких персонажей в операторе речи."

    nvl clear

    nvle "При необходимости, вы можете использовать 'nvl clear' для очистки экрана."

    nvl hide dissolve
    nvl show dissolve

    nvle "Операции 'nvl show' и 'nvl hide' используют переходы для показа и скрытия окна NVL."

Одни персонажи могут быть nvl, а другие adv-режиме в одной и той же игре, если это нужно

"""


"""
Персонажи
(персонаж может быть использован как имитатор стиля для логический персонажа, так что логический персонжал будет иметь несколько воплощений в разных персонажах renpy)

define e_shout = Character("Эйлин", who_color="#c8ffc8", what_size=34)
define e_whisper = Character("Эйлин", who_color="#c8ffc8", what_size=18)


define e1 = Character("Эйлин", window_background="gui/startextbox.png")
e1 "Параметр window_background устанавливает картинку фоном диалогового окна. Она должно быть того же размера, что и стандартное, по адресу gui/textbox.png."

define e1a = Character("Эйлин", window_background=None)
e1a "Если этот параметр установить на None, из диалогового окна пропадёт фон."

define e2 = Character("Эйлин", who_color="#c8ffc8", what_color="#ffc8c8")
e2 "Параметры who_color и what_color устаналивают цвета имени персонажа и текста диалога соответственно."

define e3 = Character("Эйлин", who_font="Roboto-Regular.ttf", what_font="Roboto-Light.ttf")
e3 "Похожим образом работают параметры who_font и what_font, устанавливающие шрифты различного текста."

define e4 = Character("Эйлин", who_bold=True, what_italic=True, what_size=20)
e4 "Применив параметры who_bold, what_italic, и what_size, мы сделаем имя жирным, а диалог курсивным и размером в 20 пикселей."
e4 "Само собой, параметры what_bold, who_italic и who_size тоже существуют, даже если они здесь не используются."

define e5 = Character("Эйлин", what_outlines=[( 1, "#008000", 0, 0 )] )
e5 "Параметр what_outlines обводит наш текст." (буквально, буквы обводит)
e5 "Этот параметр немного сложнее, так как outlines берёт сразу список значений, состоящий из четырёх родительских значений и нескольких скобок."
e5 "Первая цифра обозначает размер обводки в пикселях. Дальше следует hex-код цвета для обводки, и дальше смещение по x и y."

define e6 = Character("Эйлин", what_outlines=[( 0, "#808080", 2, 2 )] )
e6 "Если размер обводки равен 0, а смещение всё же дано, what_outlines может послужить заменой тени текста."

define e7 = Character("Эйлин", what_xalign=0.5, what_textalign=0.5, what_layout='subtitle')
e7 "Параметры what_xalign и what_textalign вместе контролируют выравнивание текста: 0.0 слева, 0.5 по центру, 1.0 справа."
e7 "Параметр what_xalign контролирует, где размещается текст по отношению к текстовой коробке, а what_textalign контролирует, как размещаются строки текста по отношению друг к другу."
e7 "В основном, вам понадобится приводить what_xalign и what_textalign к одному значению."
e7 "Поставив what_layout на 'subtitle', Ren'Py переходит в режим субтитров, когда длина каждой строчки пытается быть примерно одинаковой."
  
define e9 = Character("Эйлин", what_prefix='"', what_suffix='"')
e9 "Есть два интересных нестилевых параметра: what_prefix и what_suffix. Они могут добавлять текст в начале и в конце диалога."

define l8 = Character(kind=e8, what_outlines=[( 1, "#c00000", 0, 0 )] )

# Персонаж-рассказчик
define narrator = Character(what_italic=True)

"""

"""
Объекты

Изображения
image logo base = "logo base.png"
image bg red = "#c00"
image bg blue = "#0000cc"
image overlay red = "#c008"
image overlay blue = "#0000cc88"
image logo rotated = Transform("logo base", rotate=45) (поворот изображения на 45 градусов)

image logo solidexample = Solid("#0000cc", xysize=(200, 200)) # Синий прямоугольник 200x200
image logo text = Text("Это текстовый объект.", size=30)


# Текст-изображение, повёрнуиый на 45 градусов (по часовой стрелке)
image logo text rotate = Transform(Text("Это текстовый объект.", size=30), rotate=45)

# Несколько объектов, объединённых в одно изображение
image logo composite = Composite((240, 460),
(0, 0), "logo blink",
(0, 50), "logo base.png",
(0, 100), "logo base.png")

# Контейнер
image ninepatch frame = Frame("ninepatch", 40, 40, 40, 40)
# ???
image ninepatch frame tiled = Frame("ninepatch", 40, 40, 40, 40, tile=True)


xpos и ypos - позиции
xanchor и yanchor - это позиция "якоря" нашего изображения

xalign задаёт xpos == xanchor

xcenter - позиционирование центра изображения (xcenter 1.0 - центр изображения ровно справа, так что половина изображения скрыта экраном)

xoffset - смещает изображение после позиционирования другим параметром

комбинированные параметры принимают сразу два значения
xpos 0.5
ypos 0.5
то же,что и 
pos 0.5, 0.5


Трансформации и анимации
image eileen animated:
    "eileen vhappy"
    pause .5
    "eileen happy"
    pause .5
    repeat

# Объект движется между двумя позициями
show logo base:
    xalign .3 yalign .7
    linear 1.0 xalign .7 yalign .3
    linear 1.0 xalign .3 yalign .7
    repeat

Целые координаты - абсолютные (в пикселях). Дробные координаты - относительные

"""


"""
Стили

screen style1():
    text "Этот текст окрашен в зелёный.":
        style "my_text"
        color "#c0ffc0"


style blue_text:
    color "#c0c0ff"

image style3 = Text("Этот текст окрашен в синий.", style="blue_text")
 
style blue_text is text:
    color "#c0c0ff"
 

# Стильт кнопки
 style styled_button_text:
    idle_color "#c0c0c0"
    hover_color "#ffffff"
    insensitive_color "#303030"
    selected_idle_color "#e0e080"
    selected_hover_color "#ffffc0"

screen style4():

    default result = 1

    frame:
        style_prefix "styled"
        xpadding 20
        ypadding 20

        at examplepos

        vbox:
            textbutton "Кнопка 1" action SetScreenVariable("result", 1)
            textbutton "Кнопка 2" action SetScreenVariable("result", 2)
            textbutton "Button 3" action None
 

"""
